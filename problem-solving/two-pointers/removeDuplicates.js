/** üß© Two Pointers ‚Äî –∑–∞–¥–∞—á–∞ 3: Remove Duplicates from Sorted Array
 üìå –£–º–æ–≤–∞:
 –î–∞–Ω–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –º–∞—Å–∏–≤ nums. –ü–æ—Ç—Ä—ñ–±–Ω–æ in-place –≤–∏–¥–∞–ª–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏, —Ç–∞–∫ —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –ª–∏—à–µ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏. –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤—É –¥–æ–≤–∂–∏–Ω—É.
 –î–æ–¥–∞—Ç–∫–æ–≤—É –ø–∞–º‚Äô—è—Ç—å –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ.


 removeDuplicates([1,1,2]) ‚Üí 2 ‚Üí [1,2,_]
 removeDuplicates([0,0,1,1,1,2,2,3,3,4]) ‚Üí 5 ‚Üí [0,1,2,3,4,_,_,_,_,_]


 **/
function removeDuplicates(nums) {
  let left = 0; // –í–∫–∞–∑—ñ–≤–Ω–∏–∫ –¥–ª—è "—É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó —á–∞—Å—Ç–∏–Ω–∏"
  let right = 1; // –í–∫–∞–∑—ñ–≤–Ω–∏–∫ –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è

  while (right < nums.length) {
    if (nums[left] !== nums[right]) {
      // –ó–Ω–∞–π—à–ª–∏ –Ω–æ–≤–∏–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç
      left++; // –ì–æ—Ç—É—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –Ω—å–æ–≥–æ
      nums[left] = nums[right]; // –ó–∞–ø–∏—Å—É—î–º–æ –π–æ–≥–æ
    }
    right++; // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
  }

  return left + 1; // –î–æ–≤–∂–∏–Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó —á–∞—Å—Ç–∏–Ω–∏
}

console.log(removeDuplicates([1, 1, 2]));
/**
 Input: nums = [1,1,2]
 Output: 2 // –±–æ –º–∞—Å–∏–≤ —Å—Ç–∞—î [1,2,_]

 **/

console.log(removeDuplicates([0, 0, 1, 1, 1, 2, 2, 3, 3, 4]));
/**
 Input: nums = [0,0,1,1,1,2,2,3,3,4]
 Output: 5 // –±–æ –º–∞—Å–∏–≤ —Å—Ç–∞—î [0,1,2,3,4,_,_,_,_,_]

 **/
