/**
 *
 * üßæ Next Greater Element I
 * üß© –£–º–æ–≤–∞:
 * –î–∞–Ω–æ –¥–≤–∞ –º–∞—Å–∏–≤–∏ –±–µ–∑ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤:
 *
 * nums1 ‚Äî –ø—ñ–¥–º–Ω–æ–∂–∏–Ω–∞ nums2
 *
 * –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ x –∑ nums1, –∑–Ω–∞–π–¥–∏ –ø–µ—Ä—à–µ —á–∏—Å–ª–æ, —è–∫–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø—Ä–∞–≤–æ—Ä—É—á –≤—ñ–¥ x —É nums2 —ñ —î –±—ñ–ª—å—à–∏–º –∑–∞ x.
 *
 * –Ø–∫—â–æ —Ç–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –Ω–µ–º–∞—î ‚Äî –ø–æ–≤–µ—Ä–Ω–∏ -1.


 Input:
 nums1 = [4,1,2]
 nums2 = [1,3,4,2]

 Output:
 [-1,3,-1]

 –ü–æ—è—Å–Ω–µ–Ω–Ω—è:
 - –¥–ª—è 4 ‚Üí —Å–ø—Ä–∞–≤–∞ –≤ nums2 –Ω—ñ—á–æ–≥–æ –±—ñ–ª—å—à–æ–≥–æ ‚Üí -1
 - –¥–ª—è 1 ‚Üí –Ω–∞—Å—Ç—É–ø–Ω–µ –±—ñ–ª—å—à–µ = 3
 - –¥–ª—è 2 ‚Üí —Å–ø—Ä–∞–≤–∞ –Ω—ñ—á–æ–≥–æ ‚Üí -1

 **/

function nextGreaterElement(nums1, nums2) {
  const stack = [];
  const hashMap = new Map();

  for (let i = 0; i < nums2.length; i++) {
    const currentNumber = nums2[i];

    while (stack.length && stack.at(-1) < currentNumber) {
      const topNumber = stack.pop();
      hashMap.set(topNumber, currentNumber);
    }

    stack.push(currentNumber);
  }

  while (stack.length) {
    const topNumber = stack.pop();
    hashMap.set(topNumber, -1);
  }

  return nums1.map((el) => hashMap.get(el));
}

nextGreaterElement([4, 1, 2], [1, 3, 4, 2]);
